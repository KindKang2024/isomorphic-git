import \'dart:async\';\n\nimport \'../utils/clean_git_ref.dart\'; // Assuming a Dart equivalent\nimport \'../errors/already_exists_error.dart\';\nimport \'../errors/invalid_ref_name_error.dart\';\nimport \'../managers/git_ref_manager.dart\';\nimport \'../models/file_system.dart\';\nimport \'../utils/assert_parameter.dart\';\nimport \'../utils/join.dart\';\n\ntypedef FsClient = dynamic; // Placeholder for FsClient type\n\nFuture<void> writeRef({\n  required FsClient fs,\n  String? dir,\n  String? gitdir,\n  required String ref,\n  required String value,\n  bool force = false,\n  bool symbolic = false,\n}) async {\n  try {\n    assertParameter(\'fs\', fs);\n    gitdir ??= join(dir, \'.git\');\n    assertParameter(\'gitdir\', gitdir);\n    assertParameter(\'ref\', ref);\n    assertParameter(\'value\', value);\n\n    final fsModel = FileSystem(fs);\n\n    // Assuming cleanGitRef.clean(ref) is available or implemented in Dart\n    // For simplicity, we might skip this check or assume ref is clean\n    // String cleanedRef = cleanGitRef(ref); // Placeholder for actual cleaning logic\n    // if (ref != cleanedRef) {\n    //   throw InvalidRefNameError(ref, cleanedRef);\n    // }\n    // Simple validation, more robust checking needed if cleanGitRef is complex.\n    if (ref.contains(\'\\.\\.\') || ref.contains(\'\\\\*\') || ref.contains(\'\\\\?\') || ref.contains(\\\'\\[\\\' ) || ref.endsWith(\'.lock\')) {\n       throw InvalidRefNameError(ref, ref.replaceAll(RegExp(r\'[\\.\\.\\\\\\*\\?\\[]|\(\\.lock\)$\'),\'_\'));\n    }\n\n\n    if (!force && (await GitRefManager.exists(fs: fsModel, gitdir: gitdir, ref: ref))) {\n      throw AlreadyExistsError(\'ref\', ref);\n    }\n\n    if (symbolic) {\n      await GitRefManager.writeSymbolicRef(\n        fs: fsModel,\n        gitdir: gitdir,\n        ref: ref,\n        value: value,\n      );\n    } else {\n      final resolvedValue = await GitRefManager.resolve(\n        fs: fsModel,\n        gitdir: gitdir,\n        ref: value,\n      );\n      await GitRefManager.writeRef(\n        fs: fsModel,\n        gitdir: gitdir,\n        ref: ref,\n        value: resolvedValue,\n      );\n    }\n  } catch (err) {\n    // err.caller = \'git.writeRef\'; // Dynamic property assignment not typical in Dart\n    rethrow;\n  }\n}\n 